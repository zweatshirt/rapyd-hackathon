{"ast":null,"code":"var _jsxFileName = \"/Users/zachjlinscott/Desktop/new_rapyd/rapyd-hackathon/client/src/components/Signup/Signup.js\";\nimport React, { useState } from 'react';\nimport { Avatar, Button, Paper, Grid, Typography, Container } from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Input from './Input';\nimport { GoogleLogin } from 'react-google-login';\nimport useStyles from './styles';\nimport { useHistory } from 'react-router-dom';\nimport dotenv from 'dotenv';\nimport { useDispatch } from 'react-redux';\nexport const Signup = () => {\n  const [isSignup, setIsSignup] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleShowPassword = () => setShowPassword(prevShowPassword => !prevShowPassword); // client ID for Google OAuth\n\n\n  dotenv.config({\n    path: 'client/.env'\n  });\n  const client_id = process.env.REACT_APP_CLIENT_ID;\n  const classes = useStyles;\n  const history = useHistory(); // FIX:\n\n  const dispatch = useDispatch;\n\n  const switchMode = () => {\n    setIsSignup(prev => !prev);\n    handleShowPassword(false);\n  };\n\n  const handleSubmit = () => {\n    setIsSignup(prevIsSignup => !prevIsSignup);\n  };\n\n  const handleChange = () => {}; // callbacks to handle on success and failure events\n  // specifically related to Google sign-in/sign-up\n\n\n  const googleSuccess = async res => {\n    const profObj = res === null || res === void 0 ? void 0 : res.profileObj;\n    const token = res === null || res === void 0 ? void 0 : res.tokenId;\n\n    try {\n      dispatch({\n        'type': 'AUTH',\n        data: {\n          profObj,\n          token\n        }\n      });\n      history.push('/');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const googleFailure = error => {\n    console.log(error);\n    console.log(\"Google sign in failed. Please try again later.\");\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    elevation: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    className: classes.avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 18\n    }\n  }, /*#__PURE__*/React.createElement(LockIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, isSignup ? 'Sign up' : 'Sign in'), /*#__PURE__*/React.createElement(\"form\", {\n    className: classes.form,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 25\n    }\n  }, // only ask for first and last name on sign up\n  isSignup && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n    name: \"firstName\",\n    label: \"First Name\",\n    handleChange: handleChange,\n    autoFocus: true,\n    half: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 37\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"lastName\",\n    label: \"Last Name\",\n    handleChange: handleChange,\n    half: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }\n  })), /*#__PURE__*/React.createElement(Input, {\n    name: \"email\",\n    label: \"Email\",\n    handleChange: handleChange,\n    half: true,\n    type: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    label: \"Password\",\n    handleChange: handleChange,\n    half: true,\n    type: showPassword ? \"text\" : \"password\",\n    handleShowPassword: handleShowPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }), // only ask for password confirmation on signup\n  isSignup && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n    name: \"confirmPass\",\n    label: \"Confirm Password\",\n    handleChange: handleChange,\n    half: true,\n    type: showPassword ? \"text\" : \"password\",\n    handleShowPassword: handleShowPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, isSignup ? 'Sign up' : 'Sign in'), /*#__PURE__*/React.createElement(GoogleLogin, {\n    clientId: client_id,\n    render: renderProps => /*#__PURE__*/React.createElement(Button, {\n      className: classes.googleBtn,\n      color: \"primary\",\n      fullWidth: true,\n      onClick: renderProps.onClick,\n      disabled: renderProps.disabled,\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 25\n      }\n    }, \"Google Sign in\") // Once GoogleIcon component is created replace above with:\n    // <Button className={classes.googleBtn}\n    //     color=\"primary\"\n    //     fullWidth onClick={renderProps.onClick}\n    //     disabled={renderProps.disabled} \n    //     startIcon={<GoogleIcon/>} \n    //     variant=\"contained\">                            // </Button>\n    ,\n    onSuccess: googleSuccess,\n    onFailure: googleFailure,\n    cookiePolicy: \"single_host_origin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: switchMode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 29\n    }\n  }, isSignup ? 'Already a guest user? Sign in.' : 'Create an account.'))))));\n};\nexport default Signup;","map":{"version":3,"sources":["/Users/zachjlinscott/Desktop/new_rapyd/rapyd-hackathon/client/src/components/Signup/Signup.js"],"names":["React","useState","Avatar","Button","Paper","Grid","Typography","Container","LockIcon","Input","GoogleLogin","useStyles","useHistory","dotenv","useDispatch","Signup","isSignup","setIsSignup","showPassword","setShowPassword","handleShowPassword","prevShowPassword","config","path","client_id","process","env","REACT_APP_CLIENT_ID","classes","history","dispatch","switchMode","prev","handleSubmit","prevIsSignup","handleChange","googleSuccess","res","profObj","profileObj","token","tokenId","data","push","error","console","log","googleFailure","paper","avatar","form","submit","renderProps","googleBtn","onClick","disabled"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Avatar, Button, Paper, Grid, Typography, Container} from '@material-ui/core';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Input from './Input';\nimport { GoogleLogin } from 'react-google-login';\nimport useStyles from './styles';\nimport { useHistory } from 'react-router-dom'\nimport dotenv from 'dotenv';\nimport { useDispatch } from 'react-redux';\n\nexport const Signup = () => {\n\n    const [isSignup, setIsSignup] = useState(false);\n    const [showPassword, setShowPassword] = useState(false);\n\n    const handleShowPassword = () => setShowPassword((prevShowPassword) => !prevShowPassword);\n\n    // client ID for Google OAuth\n    dotenv.config({ path: 'client/.env' });\n    const client_id = process.env.REACT_APP_CLIENT_ID;\n\n    const classes = useStyles;\n    const history = useHistory();\n    // FIX:\n    const dispatch = useDispatch;\n\n\n    const switchMode = () => {\n        setIsSignup((prev) => !prev);\n        handleShowPassword(false);\n    }\n    const handleSubmit = () => {\n        setIsSignup((prevIsSignup) => !prevIsSignup)\n    }\n\n    const handleChange = () => {\n    }\n\n    // callbacks to handle on success and failure events\n    // specifically related to Google sign-in/sign-up\n    const googleSuccess = async (res) => {\n        const profObj = res?.profileObj;\n        const token = res?.tokenId;\n        try {\n            dispatch({'type': 'AUTH', data: {profObj, token}});\n            history.push('/');\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    const googleFailure = (error) => {\n        console.log(error);\n        console.log(\"Google sign in failed. Please try again later.\");\n    }\n\n    return (\n        <Container component=\"main\" maxWidth=\"sm\">\n            <Paper className={classes.paper} elevation={3}>\n                 <Avatar className={classes.avatar}>\n                    <LockIcon />\n                </Avatar>\n                <Typography variant=\"h5\">{ isSignup ? 'Sign up' : 'Sign in' }</Typography>\n                <form className={classes.form} onSubmit={handleSubmit}>\n                        <Grid container spacing={2}>\n                        {   // only ask for first and last name on sign up\n                            isSignup && (\n                                <>\n                                    <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus half />\n                                    <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} half />\n                                </>\n                            )\n                        }\n                        <Input name=\"email\" label=\"Email\" handleChange={handleChange} half type=\"email\" />\n                        <Input name=\"password\" label=\"Password\" handleChange={handleChange} half type={showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\n                        \n                        {   // only ask for password confirmation on signup\n                            isSignup && (\n                                <>\n                                    <Input name=\"confirmPass\" label=\"Confirm Password\" handleChange={handleChange} half type={showPassword ? \"text\" : \"password\"} handleShowPassword={handleShowPassword} />\n                                </>\n                            )\n                        }\n    \n                    </Grid>\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\n                        { isSignup ? 'Sign up' : 'Sign in' }\n                    </Button>\n                    <GoogleLogin\n                        clientId={client_id}\n                        render={(renderProps) => (\n                        <Button className={classes.googleBtn}\n                            color=\"primary\"\n                            fullWidth onClick={renderProps.onClick}\n                            disabled={renderProps.disabled}  \n                            variant=\"contained\">\n                                Google Sign in\n                        </Button>\n                        // Once GoogleIcon component is created replace above with:\n                        // <Button className={classes.googleBtn}\n                        //     color=\"primary\"\n                        //     fullWidth onClick={renderProps.onClick}\n                        //     disabled={renderProps.disabled} \n                        //     startIcon={<GoogleIcon/>} \n                        //     variant=\"contained\">                            // </Button>\n                        )}\n                        onSuccess={googleSuccess}\n                        onFailure={googleFailure}\n                        cookiePolicy=\"single_host_origin\"\n                    />\n                    <Grid container justify=\"center\">\n                        <Grid item>\n                            <Button onClick={switchMode}>\n                                { isSignup ? 'Already a guest user? Sign in.' : 'Create an account.' }\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </form>\n            </Paper>\n        </Container>\n    )\n}\n\nexport default Signup;"]},"metadata":{},"sourceType":"module"}